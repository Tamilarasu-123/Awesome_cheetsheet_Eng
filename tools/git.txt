# GIT CHEATSHEET (Chinese Quick Reference Sheet)  -  by albertwang21 (created on 2019/09/16)
# Version: 1, Last Modified: 2019/09/16 18:00
# https://github.com/skywind3000/awesome-cheatsheets
##############################################################################

# Configuration
##############################################################################
git config --global "Your Name"
git config --global "Email Address"
git config --global credential.helper store    Save password (enter or re-enter password every time)
git config user.name "Your Name" Configure the username for the current repository
git config user.email "Email Address" Configure the email address for the current repository

# Initialization
##############################################################################
git init

# Committing Changes
##############################################################################
git add <file>
git add -u Stage all tracked files in the work directory
git commit -m "descriptions"
git commit --amend Modify the most recent commit's content
git commit --amend --author "user_name <user_email>" Modify the username and email for the most recent commit

# Viewing Status and Differences
##############################################################################
git status
git status -s File status in short format, common codes: A: added; M: modified; ?: untracked; D: deleted
git diff <file>
git diff HEAD -- <file> Compare working directory and the latest version in the repository
git diff --check <file> Check for whitespace errors (regex: ' \{1,\}$')
git diff --cached <file> View changes that are staged (green M)
git diff branch1 branch2 --stat View differences between two branches
git diff branch1 branch2 <file...> View specific file differences between branches

# Viewing Version History and Operations
##############################################################################
git log
git reflog
git log -n Show the last n commits in the history
git log <branch_name> -n Show the last n commits in branch branch_name
git log --stat Show file changes for each commit
git log --shortstat Similar to --stat but shows a summary of file and line changes (n file changed, n insertions(+), n deletions(-))
git log --name-status Show a list of added, modified, and deleted files
git log lhs_hash..rhs_hash Compare changes between two commits (lhs is the subject of addition and deletion, e.g., git log HEAD~2..HEAD == git log HEAD -3)
git log -p Show the content changes for each commit
git log -p -W Show content changes for each commit with context
git log origin/EI-1024 -1 --stat -p -W View detailed changes in the last modification of the remote branch EI-1024
git log origin/master..dev --stat -p -W View detailed changes (modifications) of the local dev branch compared to the remote master branch
git log <branch_name> --oneline Display commit history in a single line
git log <branch_name> --graph Display commit history graphically
git log <branch_name> --decorate Display references related to commit history, such as tags, local and remote branches
git log <branch_name> --oneline --graph --decorate Combine the above options to display history in a tree-like format
git log --graph --pretty=format:... --abbrev-commit Similar to the above, recommended to be saved as an alias

git log --pretty=format Common format options (excerpt from progit_v2.1.9)
%H Full hash of the commit object
%h Short hash of the commit object
%T Full hash of the tree object
%t Short hash of the tree object
%P Full hash of the parent object
%p Short hash of the parent object
%an Author's name
%ae Author's email address
%ad Author's commit date (customizable format with --date=)
%ar Author's commit date, displayed in a human-friendly way
%cn Committer's name
%ce Committer's email address
%cd Commit date
%cr Commit date, displayed in a human-friendly way
%s Commit message

git log --since --after Show commits after a specific time
git log --until --before Show commits before a specific time
git --author Show commits by a specific author
git --committer Show commits by a specific committer (Note: committer may not be the author)
git log -S [keyword] Show commits that added or removed a specific keyword (useful in some cases compared to git log -p | grep [keyword])
git log origin/b3.3/master --author=yx-ren --since="2019-10-01" --before="2019-11-01" View the last month's commits by a specific author in a release version, commonly used for passing blame
git log origin/b3.0/master --author=some_leave --since="1 month ago" View the commits of a recently departed colleague in the last month, commonly used for passing blame
git log --since=1.weeks Show commits from the past week (useful for weekly reports)
git log --since=1.days Show commits from the past day (useful for checking what you've done today)
git log --since="1 weeks 2 days 3 hours 40 minutes 50 seconds ago" Show commits within a specific time frame


# Version Rollback and Forward
##############################################################################
git reset --hard HEAD^      Roll back to the previous version (1 commit back)
git reset --hard HEAD~5     Roll back to the version 5 commits back
git reset --hard id         Roll back to a specified version

# Undoing Changes
##############################################################################
git checkout -- <file>      Undo changes: Revert a mistakenly modified file in the working directory, no git add/commit
git restore <file>          Undo changes: Revert a mistakenly modified file in the working directory, no git add/commit
git reset HEAD <file>       Undo git add: Unstage a file (git add) that was added mistakenly, no git commit
git reset --hard HEAD^      Undo git commit: Revert a committed file (once committed, can only be undone by version rollback)

# Deletion and Recovery
##############################################################################
git rm/add <file>
git commit -m "remove <file>"   Delete a file in the version control: After deleting the file from the working directory, remove the corresponding file from the version control
git checkout -- <file>          Restore the working directory file based on the version-controlled file
git restore <file>              New way to restore files (introduced in 2.23)

# Cleaning Untracked or Unignored Files/Folders in the Working Directory (e.g., temporary .swp, .patch files)
##############################################################################
git clean -i    Interactive cleaning, not commonly used
git clean -n    View the list of files to be cleaned (excluding folders), without actually cleaning them
git clean -n -d View the list of files to be cleaned (including folders), without actually cleaning them
git clean -f    Clean all untracked files
git clean -df   Clean all untracked files and folders, commonly used, but ensure newly created files or folders have been added before using, otherwise, newly created files or folders will also be forcefully deleted

# Linking a GitHub Remote Repository (Local to Remote)
##############################################################################
git remote add origin <remote address> Link your local working directory to the GitHub repository as per GitHub's instructions
git remote rm origin Unlink an incorrect repository
git push -u origin master Push the local repository to the remote repository for the first time (do this after each local commit)
git push origin master Push the local repository to the remote repository in the future (do this after each local commit)
<remote address>:
    git@github.com:<username>/<repository>.git
    https://github.com/<username>/<repository>.git

# Cloning a GitHub Remote Repository (Remote to Local)
##############################################################################
git clone <remote address> git protocol is faster but usually not allowed in corporate intranets, https protocol is slower

# Branch Management: Create, Switch, View, Merge, Delete
##############################################################################
git branch <branch name>            Create a new <branch name> branch
git checkout <branch name>          Switch to the <branch name> branch
git switch <branch name>            Switch to the <branch name> branch (introduced in 2.23)
git checkout -b <branch name>       Create and switch to a new <branch name> branch
git switch -c <branch name>         Create and switch to a new <branch name> branch
git checkout origin/master -b <branch name> Create a new branch based on the <master> branch under the remote repository <origin>
git branch                          View existing branches (* indicates the current branch)
git merge <branch name>             Merge the <branch name> into the current branch (usually performed on the master branch)
git merge --no-commit <branch name> Merge the <branch name> into the current branch, but do not commit
git branch -d <branch name>         Delete a branch
git branch -m oldbranchname newname Rename a branch

# Resolving Merge Conflicts
##############################################################################
If an error occurs during merging, stating that there are conflicts, you should first edit the conflicted file in Vim, then use git add/commit to recommit the changes. Finally, delete any unnecessary branches.

# Branch Management: Keeping Branch Records after Deletion
##############################################################################
git merge --no-ff -m "descriptions" <branch name>#command is used to merge a feature branch into the current branch while creating a new merge commit, even if a fast-forward merge is possible. 

# Development Workflow:
##############################################################################
master branch              For stable releases
dev branch                 For ongoing development
<developer name> branch    Personal development branch (when personal development is completed, merge it into dev while keeping the branch for further development)

# Managing Bug Fix Branches (Creating a Separate Branch for Bug Fixes)
##############################################################################
In software development, bugs are common occurrences. In Git, with the power of branches, each bug can be fixed using a new temporary branch. After fixing the bug, merge the branch, and then delete the temporary branch.
git stash                   Save the current workspace (when working on dev but need to fix a bug on master)
git stash pop               Return to the dev branch and restore the workspace (the stash in the list will be removed at the same time)
git stash list              View the currently stored workspace
git stash apply stash@{#}   Return to a specified workspace (the stash in the list won't be removed, use git stash drop)
git stash drop stash@{#}    Delete a specified workspace
git cherry-pick <id>        After fixing a bug in master, copy the bug-fixing process to dev

# Managing Feature Branches (Creating a Separate Branch for Adding New Features)
##############################################################################
In software development, there's a constant need to add new features. When adding a new feature, 
you don't want to disrupt the main branch with experimental code. It's best to create a feature branch for each new feature, develop it there, merge it upon completion, and then delete the feature branch.

git branch -D <branch name>    Force delete a branch (discarding unmerged changes)

##############################################################################
# Collaborating and Pushing Branches
##############################################################################
User 1:
git remote [-v]                        View remote repository information (-v for detailed information)
git remote update origin --prune       Update the branch list (update the list of remote branches)
git remote update origin -p            Update the branch list (update the list of remote branches)
git push origin [master/dev/...]       Push a specific branch to the remote repository
User 2:
git clone <remote address>             Clone the repository locally (can only clone the master branch)
git checkout -b dev origin/dev         Create a new local branch and associate it with the remote branch
git add/commit/push                    Add, commit, and push updates
User 1:
git add/commit/push                    Error occurs during push (conflict with updates pushed by User 2)
git pull <remote> <branch>
git branch --set-upstream-to=origin/<branch> <branch>    Link local and remote branches
git pull                               Fetch remote files (and resolve conflicts)
git commit/push                        Resubmit and push updates



##############################################################################
# Tag Management (Commonly Used for Versioning): View, Create, Operations
##############################################################################
git tag                             View tags
git show <tag name>                 View a specific tag
git log --pretty=oneline --abbrev-commit --decorate=full    Display tags in log
git tag <tag name>                  Create a tag at the current commit location
git tag <tag name> <commit id>      Create a tag at a specific commit location
git tag -a <tag name> -m "descriptions" <commit id>         Create a tag at a specific commit location with a description
git tag -d <tag name>               Delete a local tag
git push origin <tag name>          Push a specific tag to the remote repository
git push origin --tags              Push all local tags to the remote repository
git push origin :refs/tags/<tag name> Delete a remote tag (must delete the local tag first)

##############################################################################
# Rebase (Changing the Base)
##############################################################################
# Rebase has two common uses in daily work: rebasing to master in collaborative development and compressing multiple commits in a branch.
# In collaborative development, each developer should regularly rebase their branch to the latest master. This helps prevent conflicts.
# Even if conflicts occur, it's better to resolve them locally than to force a commit. It's important to keep the master branch clean and tidy during development.

Example:
Suppose the master branch has three commits: C1, C2, C3.
At some point, usr1 checks out a new branch from C3 of the master branch to develop server-side support for IPv6 and makes two commits, C4 and C5.
git checkout -b ipv6_support
...
git commit -m C4
...
git commit -m C5
At this point, the commit status looks like this:
      (origin/master branch)
             |
C1 <- C2 <- C3
             \
              \
               \
                C4 <- C5
                       |
                (ipv6_support branch)

A colleague, usr2, fixes a memory leak in the master branch and commits C6, C7, and C8. They then push to origin/master, assuming no other developers have pushed during this time.
The commit status now appears as follows:
                    (origin/usr2/fix_mem_leak branch)
                               |
C1 <- C2 <- C3 <- C6 <- C7 <- C8
             \                 |
              \         (origin/master branch)
               \
                C4 <- C5
                       |
                (ipv6_support branch)

If usr1 now wants to merge the IPv6 feature into the master branch, pushing directly to origin master will trigger a request to merge the ipv6_support branch.
Even though the changes in C4 and C5 are completely independent of C6, C7, and C8, Git will fetch C5 and C8 commits and create a new commit, C9.
The commit status appears as follows:
C1 <- C2 <- C3 <- C6 <- C7 <- C8
             \                 \
              \                 \
               \                 \
                C4 <- C5 <------ C9

If the goal is to ensure a "clean and complete" commit history on the master branch or if a branch is not yet ready for submission but should not diverge significantly from the initially checked-out master branch, you can use rebase (regularly) for these purposes. Regular rebasing on the master branch is a good practice in collaborative development.

git checkout ipv6_support
git rebase master
The resulting commit status is as follows:
            (origin/master origin/usr2/fix_mem_leak branch)
                               |
C1 <- C2 <- C3 <- C6 <- C7 <- C8
                                \
                                 \
                                  \
                                   C4' <- C5'
                                           |
                                    (ipv6_support branch)
This type of rebase is functionally similar to bundling all changes in a branch into multiple patches and applying them sequentially to a specified new base.
Now, when you commit to the master branch, there will be no fetching effect. C4' and C5' will be submitted directly to the master branch, and the commit can be fast-forwarded, ensuring a clean commit history.

Note: While the content of C4' and C5' is identical to C4 and C5, they have different bases and completely different commit hash codes.

git rebase --noto <branch_lhs> <branch_rhs> # Replay, used to rebase commits in branch_lhs but not in branch_rhs


git rebase -i HEAD~n #:Compresses the last n commits of the current branch into one commit. The most common usage involves having the first line as "pick" and the remaining n-1 lines as "squash."

git rebase --abort #:If an error occurs during the rebase process, you can use this command to terminate the entire rebase process.

git rebase --continue #:In case of conflicts during the rebase process, after resolving the conflicts, you can use this command to continue with the remaining steps.

##############################################################################
# Create Patches
##############################################################################
# Generate diff patch files (recognized by Git)
git log -n -p > diff.patch  # Generate diff information for the last n commits in a branch and save it to a single diff file
git diff [--cached] diff.patch  # Generate a diff file for the content in the current staging area

# Apply Patches
git apply --check diff.patch  # Check if the patch can be applied without conflicts (no output means no conflicts)
git apply --stat diff.patch  # View the changes in files after applying the diff file
git apply diff.patch  # Apply the patch to change file information; it does not include commit information, so you still need to add and commit the changes

# Generate Patches with Commit Information
git format-patch <branch> -n  # Generate patches for the last n commits on the <branch>
git format-patch <r1>..<r2>  # Generate patches for modifications between two commits (including both <r1> and <r2>)
git format-patch -1 <r1>  # Generate a patch for a single commit
git format-patch <r1>  # Generate patches for modifications since a specific commit (excluding that commit)
git format-patch --root <r1>  # Generate patches for all commits from the root to the <r1> commit

# Apply Patches with `git am`
git apply --check 0001-update-bash.sh.patch  # Check if the patch conflicts with the current branch
git apply --stat 0001-update-bash.sh.patch  # Check the changes in the patch file (no output means no conflicts)
git am 0001-update-bash.sh.patch  # Apply the patch to the current branch, including commit information
git am ./*.patch  # Apply all patches in the current directory in order
git am --abort  # Terminate the entire patching process, similar to `rebase --abort`
git am --resolved  # After resolving conflicts, execute this command to continue with the patching process, similar to `rebase --continue`

##############################################################################
# Bundle
##############################################################################
# This command packages a Git project. By default, it bundles all commit history and tracked files.
# Unlike a simple tar.gz archive that packs the entire directory, a bundle only includes records that have been pushed.
# For example, if a Git project has a .build directory with build artifacts, and the .gitignore file excludes it,
# creating a tar.gz archive would include the ignored directory, potentially resulting in a large and unwieldy archive.
# If you don't want to delete the entire build directory just to create a package (e.g., because rebuilding it is time-consuming),
# you can use the bundle command to package only the tracked files.
# You can also use a Git clone URL to reconstruct the project directly.
git bundle create awesome-cheatsheets.bundle HEAD master  # Package all data from the master branch for reconstruction
git clone awesome-cheatsheets.bundle  # Reconstruct the project

# Bundle can also package a specific range of commits. There are multiple ways to specify commit ranges.
git bundle create awesome-cheatsheets.bundle HEAD~10  # Package the last 10 commits
git bundle create awesome-cheatsheets.bundle HEAD~10..HEAD  # Package commits between HEAD~10 and HEAD
git bundle create awesome-cheatsheets.bundle lhs_commit_md5..rhs_commit_md5  # Package commits between lhs_commit_md5 and rhs_commit_md5
git bundle create awesome-cheatsheets.bundle origin/master..master  # Package commits in the local master that are not in the origin/master
git bundle create awesome-cheatsheets.bundle master ^origin/master  # Package commits in the master but not in the origin/master

##############################################################################
# Using GitHub
##############################################################################
fork --> clone --> add/commit/push --> pull request

##############################################################################
# Other Configurations
##############################################################################
git config --global color.ui true  # Enable color display

##############################################################################
# Configuring .gitignore File
##############################################################################
/<dir name>/                    # Ignore a directory
*.zip                           # Ignore .zip files
/<dir name>/<file name>         # Ignore a specific file

##############################################################################
## After the .gitignore file is in effect
##############################################################################
git add -f <file>             # Forcefully add a file (ignore .gitignore rules)
git check-ignore -v <file>    # Check which rules apply to the file (verbose mode)

##############################################################################
# Configure Aliases
##############################################################################
git config [--global] alias.<alias> '<original command>'  # Set up an alias for a Git command, either for the entire repository or the current workspace
.git/config  # The configuration file for the current workspace
~/.gitconfig  # The configuration file for the current user

##############################################################################
# References
##############################################################################
https://www.liaoxuefeng.com/wiki/896043488029600
https://git-scm.com/book/en/v2

##############################################################################
# Submodules
##############################################################################
git submodule foreach git pull  # Update submodules
