##############################################################################
# VIM CHEATSHEET (Chinese Quick Reference) - by skywind (created on 2017/10/12)
# Version: 47, Last Modified: 2020/10/10 11:02
# https://github.com/skywind3000/awesome-cheatsheets
##############################################################################

##############################################################################
# Cursor Movement
##############################################################################

h                   Move the cursor left, same as <Left> key
j                   Move the cursor down, same as <Down> key
k                   Move the cursor up, same as <Up> key
l                   Move the cursor right, same as <Right> key
CTRL-F              Next page
CTRL-B              Previous page
CTRL-U              Move half a screen up
CTRL-D              Move half a screen down
0                   Jump to the beginning of the line (the number zero, not the letter 'O'), equivalent to the <Home> key
^                   Jump to the first non-whitespace character at the beginning of the line
$                   Jump to the end of the line, equivalent to the <End> key
gg                  Jump to the first line, equivalent to CTRL+<Home>
G                   Jump to the last line, equivalent to CTRL+<End>
nG                  Jump to the nth line, for example, 10G moves to the tenth line
:n                  Jump to the nth line, for example, :10<Enter> moves to the tenth line
10%                 Move to 10% of the file
15|                 Move to the 15th column of the current line
w                   Jump to the beginning of the next word (word: separated by punctuation or spaces)
W                   Jump to the beginning of the next word (WORD: separated by spaces)
e                   Jump to the end of the next word (word: separated by punctuation or spaces)
E                   Jump to the end of the next word (WORD: separated by spaces)
b                   Jump to the beginning of the previous word (word: separated by punctuation or spaces)
B                   Jump to the beginning of the previous word (WORD: separated by spaces)
ge                  Jump to the end of the previous word
)                   Move forward one sentence (separated by periods)
(                   Move backward one sentence (separated by periods)
}                   Move forward one paragraph (separated by blank lines)
{                   Move backward one paragraph (separated by blank lines)
<enter>             Move to the first non-empty character of the next line
+                   Move to the first non-empty character of the next line (same as Enter key)
-                   Move to the first non-empty character of the previous line
H                   Move to the top of the screen
M                   Move to the middle of the screen
L                   Move to the bottom of the screen
fx                  Jump to the next occurrence of the character 'x', 2f/ can find the second forward slash
Fx                  Jump to the previous occurrence of the character 'x'
tx                  Jump to the character 'x' before the next occurrence
Tx                  Jump to the character 'x' before the previous occurrence
;                   Jump to the next result of the last f/t search
,                   Jump to the previous result of the last f/t search
<S-Left>            Hold SHIFT and press the left arrow key to move one word to the left
<S-Right>           Hold SHIFT and press the right arrow key to move one word to the right
<S-Up>              Hold SHIFT and press the up arrow key to scroll up
<S-Down>            Hold SHIFT and press the down arrow key to scroll down
gm                  Move to the middle of the line
gj                  Move the cursor down one line (ignores automatic line wrapping)
gk                  Move the cursor up one line (ignores automatic line wrapping)


##############################################################################
# Insert Mode: Entering and Exiting
##############################################################################

i                   Enter insert mode at the cursor position
I                   Enter insert mode at the beginning of the line
a                   Enter insert mode after the cursor
A                   Enter insert mode at the end of the line
o                   Insert a new line below and enter insert mode
O                   Insert a new line above and enter insert mode
gi                  Return to the last insert mode position
<ESC>               Exit insert mode
CTRL-[              Exit insert mode (equivalent to ESC, but more convenient)

##############################################################################
# INSERT MODE - Entered with commands like i, I, a, A, o, O
##############################################################################

<Up>                Move the cursor up
<Down>              Move the cursor down
<Left>              Move the cursor left
<Right>             Move the cursor right
<S-Left>            Hold SHIFT and press the left arrow key to move one word to the left
<S-Right>           Hold SHIFT and press the right arrow key to move one word to the right
<S-Up>              Hold SHIFT and press the up arrow key to scroll up
<S-Down>            Hold SHIFT and press the down arrow key to scroll down
<PageUp>            Scroll up one page
<PageDown>          Scroll down one page
<Delete>            Delete the character at the cursor position
<BS>                Backspace, delete the character before the cursor
<Home>              Jump to the beginning of the line
<End>               Jump to the end of the line
CTRL-W              Delete the word before the cursor
CTRL-O              Temporarily exit insert mode, execute a single command, and return to insert mode
CTRL-\ CTRL-O       Temporarily exit insert mode (cursor position preserved), execute a single command, and return to insert mode
CTRL-R 0            Insert the contents of register 0 (internal clipboard), you can replace 0 with a register name after CTRL-R
CTRL-R "            Insert the contents of the unnamed register, similar to pasting in insert mode with 'p'
CTRL-R =            Insert the result of an expression evaluation, followed by an equal sign and an expression
CTRL-R :            Insert the last command from the command line
CTRL-R /            Insert the last search keyword
CTRL-F              Auto-indent the line
CTRL-U              Delete all characters on the current line
CTRL-V {char}       Insert a non-numeric literal character
CTRL-V {number}     Insert an ASCII/Unicode character represented by three digits
CTRL-V 065          Insert a decimal ASCII character (two digits), e.g., 065 for 'A'
CTRL-V x41          Insert a hexadecimal ASCII character (three digits), e.g., x41 for 'A'
CTRL-V o101         Insert an octal ASCII character (three digits), e.g., o101 for 'A'
CTRL-V u1234        Insert a hexadecimal Unicode character (four digits)
CTRL-V U12345678    Insert a hexadecimal Unicode character (eight digits)
CTRL-K {ch1} {ch2}  Insert a digraph (see :h digraph), for quick input of Japanese characters or symbols
CTRL-D              Indent text forward
CTRL-T              Indent text backward



##############################################################################
#Text Editing
##############################################################################

r                   Replace the current character
R                   Enter replace mode until ESC is pressed
s                   Replace a character (delete the character under the cursor and enter insert mode, a count can be used before 's')
S                   Replace a line (delete the current line and enter insert mode, a count can be used before 'S')
cc                  Change the current line (delete the current line and enter insert mode), same as 'S'
cw                  Change the current word starting from the cursor position
ciw                 Change the word under the cursor
caw                 Change the word under the cursor, including leading and trailing spaces (if any)
c0                  Change to the beginning of the line
c^                  Change to the beginning of the line (first non-zero character)
c$                  Change to the end of the line
C                   Change to the end of the line (same as 'c$')
ci"                 Change the content within double quotes
ci'                 Change the content within single quotes
cib                 Change the content within parentheses
cab                 Change the content within parentheses (including parentheses themselves)
ci)                 Change the content within parentheses
ci]                 Change the content within square brackets
ciB                 Change the content within curly braces
caB                 Change the content within curly braces (including curly braces themselves)
ci}                 Change the content within curly braces
cit                 Change the content within XML tags
cis                 Change the current sentence
c2w                 Change the next two words
ct(                 Change until the opening parenthesis
c/apple             Change until the first "apple" after the cursor
x                   Delete the current character; a number can precede 'x,' e.g., 3x to delete three characters
X                   Delete the character before the cursor
dd                  Delete the current line
d0                  Delete to the beginning of the line
d^                  Delete to the beginning of the line (first non-zero character)
d$                  Delete to the end of the line
D                   Delete to the end of the line (same as 'd$')
dw                  Delete the current word
diw                 Delete the word under the cursor
daw                 Delete the word under the cursor, including leading and trailing spaces (if any)
di"                 Delete the content within double quotes
di'                 Delete the content within single quotes
dib                 Delete the content within parentheses
di)                 Delete the content within parentheses
dab                 Delete the content within parentheses (including parentheses themselves)
di]                 Delete the content within square brackets
diB                 Delete the content within curly braces
di}                 Delete the content within curly braces
daB                 Delete the content within curly braces (including curly braces themselves)
dit                 Delete the content within XML tags
dis                 Delete the current sentence
dip                 Delete the current paragraph (a paragraph is separated by blank lines before and after)
dap                 Delete the current paragraph (including leading and trailing blank lines)
d2w                 Delete the next two words
dt(                 Delete until the opening parenthesis
d/apple             Delete until the first "apple" before the cursor
dgg                 Delete to the beginning of the file
dG                  Delete to the end of the file
d}                  Delete the next paragraph
d{                  Delete the previous paragraph
u                   Undo
U                   Undo the entire line operation
CTRL-R              Redo the last 'u' command
J                   Join multiple lines into one line
.                   Repeat the last operation
~                   Swap the case (upper/lower) of the character
g~iw                Swap the case of the current word
gUiw                Convert the word to uppercase
guiw                Convert the current word to lowercase
guu                 Convert the entire line to lowercase
gUU                 Convert the entire line to uppercase
<<                  Decrease the indent
>>                  Increase the indent
==                  Auto-indent
CTRL-A              Increase a number
CTRL-X              Decrease a number


##############################################################################
# Copy and Paste
##############################################################################

p                   Paste after the cursor
P                   Paste before the cursor
v                   Start visual selection
y                   Copy the selected content
V                   Start visual selection line-wise
CTRL-V              Start visual selection block-wise
y$                  Copy from the current position to the end of the line
yy                  Copy the current line
Y                   Copy the current line, same as yy
yiw                 Copy the current word
3yy                 Copy the three lines under the cursor
v0                  Select from the current position to the beginning of the line
v$                  Select from the current position to the end of the line
viw                 Select the current word
vib                 Select what's inside the parentheses
vi)                 Select what's inside the parentheses
vi]                 Select what's inside the square brackets
viB                 Select what's inside the curly braces
vi}                 Select what's inside the curly braces
vis                 Select the content of the current sentence
vip                 Select the current paragraph (a paragraph is separated by blank lines before and after)
vap                 Select the current paragraph (including leading and trailing blank lines)
vab                 Select what's inside the parentheses (including the parentheses themselves)
va)                 Select what's inside the parentheses (including the parentheses themselves)
va]                 Select what's inside the square brackets (including the square brackets themselves)
vaB                 Select what's inside the curly braces (including the curly braces themselves)
va}                 Select what's inside the curly braces (including the curly braces themselves)
gv                  Reselect the last selected text
:set paste          Enable paste mode (avoid automatic indentation during pasting)
:set nopaste        Disable paste mode
"?yy                Copy the current line to register ?, where ? represents the register name (0-9)
"?d3j               Delete the three lines below the cursor and put them in register ?, where ? represents the register name (0-9)
"?p                 Paste the content of register ? after the cursor
"?P                 Paste the content of register ? before the cursor
:registers          Display the content of all registers
:[range]y           Copy a range, for example, :20,30y copies lines 20 to 30, :10y copies the 10th line
:[range]d           Delete a range, for example, :20,30d deletes lines 20 to 30, :10d deletes the 10th line
ddp                 Swap two lines: first, delete the current line, copy it to the register, and then paste it
"_[command]         Use [command] to delete content without copying (won't pollute registers)
"*[command]         Use [command] to copy content to the system clipboard (requires Vim version with clipboard support)



##############################################################################
# Text Objects - used with c, d, v, y, and other commands, generally in the form of <range i/a><type>
##############################################################################

$                   To the end of the line
0                   To the beginning of the line
^                   To the beginning of the line (first non-empty character)
tx                  To the character 'x' before the cursor position
fx                  To the character 'x' at the cursor position
iw                  Inside the word (excluding delimiters)
aw                  A word (including delimiters)
iW                  Inside the WORD (excluding delimiters)
aW                  A WORD (including delimiters)
is                  Inside the sentence (excluding delimiters)
as                  A sentence (including delimiters)
ip                  Inside the paragraph (excluding leading and trailing blank lines)
ap                  A paragraph (including leading and trailing blank lines)
ib                  Inside parentheses
ab                  Inside parentheses (including parentheses themselves)
iB                  Inside curly braces
aB                  Inside curly braces (including curly braces themselves)
i)                  Inside parentheses
a)                  Inside parentheses (including parentheses themselves)
i]                  Inside square brackets
a]                  Inside square brackets (including square brackets themselves)
i}                  Inside curly braces
a}                  Inside curly braces (including curly braces themselves)
i'                  Inside single quotes
a'                  Inside single quotes (including single quotes themselves)
i"                  Inside double quotes
a"                  Inside double quotes (including double quotes themselves)
2i)                 Inside two levels of parentheses outward
2a)                 Inside two levels of parentheses outward (including parentheses themselves)
2f)                 To the second occurrence of the parentheses
2t)                 To the character before the second occurrence of the parentheses



##############################################################################
# Search and Replace
##############################################################################

/pattern            Search for 'pattern' from the cursor position to the end of the file
?pattern            Search for 'pattern' from the cursor position to the beginning of the file
n                   Execute the previous search in the same direction
N                   Execute the previous search in the opposite direction
*                   Search forward for the word under the cursor
#                   Search backward for the word under the cursor
:s/p1/p2/g          Replace all instances of 'p1' with 'p2' in the current line
:%s/p1/p2/g         Replace all instances of 'p1' with 'p2' in the entire file
:%s/p1/p2/gc        Replace all instances of 'p1' with 'p2' in the entire file and prompt for each replacement
:10,20s/p1/p2/g     Replace all instances of 'p1' with 'p2' in lines 10 to 20
:.,ns/p1/p2/g       Replace all instances of 'p1' with 'p2' in the current line to 'n' lines ahead
:.,+10s/p1/p2/g     Replace all instances of 'p1' with 'p2' in the current line to 10 lines ahead of the current line
:.,$s/p1/p2/g       Replace all instances of 'p1' with 'p2' in the current line to the end of the file
:0,.s/p1/p2/g       Replace all instances of 'p1' with 'p2' in the first line to the current line
:%s/1\\2\/3/123/g   Replace "1\2/3" with "123" (use backslashes to escape special characters)
:%s/\r//g           Delete DOS carriage return characters (^M)


##############################################################################
#VISUAL MODE - Entered with v, V, or CTRL-V
##############################################################################

>                   Increase the indentation of the highlighted selection
<                   Decrease the indentation of the highlighted selection
d                   Delete the highlighted text
x                   Delete the highlighted text
c                   Change the text, i.e., delete the highlighted text and enter insert mode
s                   Change the text, i.e., delete the highlighted text and enter insert mode
y                   Copy the highlighted text
~                   Toggle the case of the selected text (uppercase to lowercase, and vice versa)
o                   Jump to the other end of the marked area
O                   Jump to the other end of the marked block
u                   Convert the highlighted area to lowercase
U                   Convert the highlighted area to uppercase
g CTRL-G            Display statistics for the selected area
<Esc>               Exit Visual Mode

##############################################################################
# Navigation and Jumping
##############################################################################

CTRL-O              Jump to the previous location
CTRL-I              Jump to the next location
CTRL-^              Jump to the alternate file (the previous file in the current window)
CTRL-]              Jump to the hyperlink under the current cursor position
CTRL-T              Return to the previous jump location
%                   Jump to the matching {}, (), or []
gd                  Jump to the local definition of the word under the cursor
gD                  Jump to the global definition of the word under the cursor
gf                  Open the file named under the cursor
[[                  Jump to the previous top-level function (e.g., in C using curly braces)
]]                  Jump to the next top-level function (e.g., in C using curly braces)
[m                  Jump to the previous member function
]m                  Jump to the next member function
[{                  Jump to the previous unmatched {
]}                  Jump to the next unmatched }
[(                  Jump to the previous unmatched (
])                  Jump to the next unmatched )
[c                  Jump to the previous difference (during diff mode)
]c                  Jump to the next difference (during diff mode)
[/                  Jump to the beginning of a C comment
]/                  Jump to the end of a C comment
``                  Go back to the last jump location
''                  Go back to the last jump location
`.                  Go back to the last edited location
'.                  Go back to the last edited location

##############################################################################
#File Operations
##############################################################################

:w                  Save the file
:w <filename>       Save the file with a specific name
:e <filename>       Open and edit a file
:saveas <filename>  Save the current file with a different name
:r <filename>       Read the contents of a file and insert them after the cursor
:r !dir             Capture the output of the 'dir' command and insert it after the cursor
:close              Close the current file
:q                  Quit (close) the current file
:q!                 Forcefully quit (discard changes)
:wa                 Save all open files
:cd <path>          Change Vim's current working directory
:pwd                Display Vim's current working directory
:new                Open a new window to edit a new file
:enew               Create a new file in the current window
:vnew               Edit a new file in a vertically split window
:tabnew             Edit a new file in a new tab page


##############################################################################
#Open File Operations
##############################################################################

:ls                 List open buffers
:bn                 Switch to the next buffer
:bp                 Switch to the previous buffer
:bd                 Delete the buffer
:b 1                Switch to buffer number 1
:b abc              Switch to the buffer with a filename starting with 'abc'
:badd <filename>    Add a file to the buffer list
:set hidden         Set hidden mode (unsaved buffers can be switched or closed)
:set nohidden       Disable hidden mode (unsaved buffers cannot be switched or closed)
n CTRL-^            Switch buffers - first enter the buffer number and then press CTRL + 6

##############################################################################
# Window Operations
##############################################################################

:sp <filename>      Split the window vertically and open the file 'filename' in the new window
:vs <filename>      Split the window horizontally and open the file 'filename' in the new window
CTRL-W s            Split the window horizontally
CTRL-W v            Split the window vertically
CTRL-W w            Cycle to the next window
CTRL-W W            Cycle to the previous window
CTRL-W p            Go to the previous accessed window
CTRL-W c            Close the current window
CTRL-W o            Close other windows, keeping only the current one
CTRL-W h            Go to the left window
CTRL-W j            Go to the window below
CTRL-W k            Go to the window above
CTRL-W l            Go to the right window
CTRL-W +            Increase the current window's height (you can prefix with a number)
CTRL-W -            Decrease the current window's height (you can prefix with a number)
CTRL-W <            Decrease the current window's width (you can prefix with a number)
CTRL-W >            Increase the current window's width (you can prefix with a number)
CTRL-W =            Make all windows the same size
CTRL-W H            Move the current window to the far left
CTRL-W J            Move the current window to the bottom
CTRL-W K            Move the current window to the top
CTRL-W L            Move the current window to the far right
CTRL-W x            Swap windows
CTRL-W f            Open the file under the cursor in a new window
CTRL-W gf           Open the file under the cursor in a new tab page
CTRL-W R            Rotate the windows
CTRL-W T            Move the current window to a new tab page
CTRL-W P            Jump to the preview window
CTRL-W z            Close the preview window
CTRL-W _            Vertically maximize the current window
CTRL-W |            Horizontally maximize the current window


##############################################################################
#Tab Page Operations
##############################################################################

:tabs Show all tab pages
:tabe <filename> Open the file 'filename' in a new tab page
:tabn Next tab page
:tabp Previous tab page
:tabc Close the current tab page
:tabo Close other tab pages
:tabn n Switch to the nth tab page, e.g., :tabn 3 to switch to the third tab page
:tabm n Move tab pages
:tabfirst Switch to the first tab page
:tablast Switch to the last tab page
:tab help Open help in a tab page
:tab drop <file> Jump to the file in another tab page or open it in a new tab page
:tab split Open the current window's file in a new tab page
:tab ball Open all files in buffers in tab pages
:set showtabline=? Set to 0 to hide the tab labels, 1 to show them as needed, 2 to always show
ngt Switch to the nth tab page, e.g., 2gt switches to the second tab page
gt Next tab page
gT Previous tab page

##############################################################################

Bookmarks
##############################################################################

:marks Show all bookmarks
ma Save the current position as bookmark 'a'. Lowercase letters are local to the file, uppercase letters are global.
'a Jump to the line where bookmark 'a' is located
a Jump to the position where bookmark 'a' is located . Jump to the last edited line
'A Jump to global bookmark 'A'
[' Jump to the previous bookmark
]' Jump to the next bookmark
'< Jump to the start of the last visual mode selection
'> Jump to the end of the last visual mode selection
:delm a Delete buffer-local bookmark 'a'
:delm A Delete file-global bookmark 'A'
:delm! Delete all buffer-local bookmarks (lowercase letters). Cannot delete file bookmarks and number bookmarks.
:delm A-Z Delete all file bookmarks (uppercase letters)
:delm 0-9 Delete all number bookmarks (.viminfo)
:delm A-Z0-9 Delete all file bookmarks and number bookmarks
 
##############################################################################
#Common Settings
##############################################################################

:set nocompatible Set to enable Vim mode (must be set at the beginning)
:set bs=? Set the backspace key mode; modern editors use :set bs=eol,start,indent
:set sw=4 Set the tabstop width to 4
:set ts=4 Set the tab width to 4
:set noet Set to not expand tabs to spaces
:set et Set to expand tabs to spaces
:set winaltkeys=no Set to properly capture ALT key in GVim
:set nowrap Disable automatic line wrapping
:set ttimeout Enable terminal key detection timeout (function keys in the terminal start with ESC)
:set ttm=100 Set terminal key detection timeout to 100 milliseconds
:set term=? Set the terminal type, e.g., commonly used xterm
:set ignorecase Set to ignore case when searching (can be abbreviated as :set ic)
:set noignorecase Set to not ignore case when searching (can be abbreviated as :set noic)
:set smartcase Smart case sensitivity; searches are case-sensitive if the search pattern contains uppercase letters
:set list Display tabs and line breaks
:set number Display line numbers; use :set nonumber to disable line numbers
:set relativenumber Display relative line numbers (show the distance of other lines from the current line)
:set paste Enter paste mode (disables formatting and indenting for pasting)
:set nopaste Exit paste mode
:set spell Enable spell-check
:set hlsearch Enable highlight search results
:set ruler Always display the cursor position
:set incsearch Dynamically display search results as you type
:set insertmode Always stay in insert mode; use ctrl-o to temporarily execute commands
:set all List all option settings
:syntax on Enable syntax highlighting
:syntax off Disable syntax highlighting

##############################################################################

Help Information
##############################################################################

:h tutor Vim's beginner's guide
:h quickref Quick reference
:h index Search Vim's keyboard commands
:h summary Help to make better use of the built-in help system
:h CTRL-H Look up what CTRL-H does in Normal mode
:h i_CTRL-H Look up what CTRL-H does in Insert mode
:h i_<Up> Find out what the Up arrow key does in Insert mode
:h pattern.txt Regular expression help
:h eval Script writing help
:h function-list View a list of VimScript functions
:h windows.txt Window usage help
:h tabpage.txt Tab page usage help
:h +timers Display help for the +timers feature
:h :! Learn how to run external commands
:h tips Check Vim's built-in tips document
:h set-termcap See how to set key scan codes
:viusage Normal mode help
:exusage Ex command help
:version Show the current version and features of Vim


##############################################################################
# External Commands
##############################################################################

:!ls Run the external command ls and wait for the output
:r !ls Capture the output of the external command ls and insert it after the cursor
:w !sudo tee % Save the current file with sudo
:call system('ls') Call the ls command without displaying the return content
:!start notepad Start Notepad in Windows (you can add silent at the beginning)
:sil !start cmd Open a command prompt in the current directory in Windows
:%!prog Run a text filtering program, such as formatting JSON: %!python -m json.tool

##############################################################################

Quickfix Window
##############################################################################

:copen Open the quickfix window (used to view compile or grep information)
:copen 10 Open the quickfix window and set its height to 10
:cclose Close the quickfix window
:cfirst Jump to the first error in the quickfix list
:clast Jump to the last error in the quickfix list
:cc [nr] View error [nr] in the quickfix list
:cnext Jump to the next error in the quickfix list
:cprev Jump to the previous error in the quickfix list


##############################################################################
# 拼写检查
##############################################################################

:set spell          打开拼写检查
:set nospell        关闭拼写检查
]s                  下一处错误拼写的单词
[s                  上一处错误拼写的单词
zg                  加入单词到拼写词表中
zug                 撤销上一次加入的单词
z=                  拼写建议


##############################################################################
# 代码折叠
##############################################################################

za                  切换折叠
zA                  递归切换折叠
zc                  折叠光标下代码
zC                  折叠光标下所有代码
zd                  删除光标下折叠
zD                  递归删除所有折叠
zE                  删除所有折叠
zf                  创建代码折叠
zF                  指定行数创建折叠
zi                  切换折叠
zm                  所有代码折叠一层
zr                  所有代码打开一层
zM                  折叠所有代码，设置 foldlevel=0，设置 foldenable
zR                  打开所有代码，设置 foldlevel 为最大值
zn                  折叠 none，重置 foldenable 并打开所有代码
zN                  折叠 normal，重置 foldenable 并恢复所有折叠
zo                  打开一层代码
zO                  打开光标下所有代码折叠


##############################################################################
# 宏录制
##############################################################################

qa                  开始录制名字为 a 的宏
q                   结束录制宏
@a                  播放名字为 a 的宏
@@                  播放上一个宏
@:                  重复上一个ex命令（即冒号命令）


##############################################################################
#Other Commands
##############################################################################

CTRL-X CTRL-F Insert mode: File path completion
CTRL-X CTRL-O Insert mode: Omni completion
CTRL-X CTRL-N Insert mode: Keyword completion
CTRL-X CTRL-E Insert mode: Scroll up
CTRL-X CTRL-Y Insert mode: Scroll down
CTRL-E Scroll up
CTRL-Y Scroll down
CTRL-G Display the filename, size, and position information of the file being edited
g CTRL-G Show file statistics: size, character count, word count, and line count; available in visual mode as well
zz Center the line with the cursor on the screen
zt Place the line with the cursor at the top of the screen
zb Place the line with the cursor at the bottom of the screen
ga Display the ASCII or Unicode code for the character under the cursor
g8 Display the UTF-8 byte sequence for the character under the cursor
gi Return to the last insertion point and switch to insert mode
K Look up the help for the word under the cursor
ZZ Save the file (if modified) and exit the window
ZQ Exit the window without saving the file
CTRL-PgUp Previous tab page (works in GVim; may require setting the corresponding key code in some terminal software)
CTRL-PgDown Next tab page (works in GVim; may require setting the corresponding key code in some terminal software)
CTRL-R CTRL-W Insert the word under the cursor in command mode
CTRL-INSERT Copy to system clipboard (GVim)
SHIFT-INSERT Paste from the system clipboard (GVim)
:set ff=unix Set line endings to Unix format
:set ff=dos Set line endings to DOS format
:set ff? View line ending settings
:set nohl Clear search highlight
:set termcap View what commands will be sent to and received from the terminal
:set guicursor= Resolve strange characters in NeoVim in SecureCRT/PenguiNet
:set t_RS= t_SH= Resolve strange characters in Vim 8.0 terminal function in SecureCRT/PenguiNet
:set fo+=a Enable real-time auto-formatting of text paragraphs
:earlier 15m Go back to the file content from 15 minutes ago
:.!date Insert the current time in the current window
:%!xxd Start binary editing
:%!xxd -r Save binary editing
:r !curl -sL {URL} Read the content of a URL and add it after the cursor
:g/^\s*$/d Delete blank lines
:g/green/d Delete all lines containing "green"
:v/green/d Delete all lines not containing "green"
:g/gladiolli/# Search for a word, print the results with line numbers
:g/ab.*cd.*efg/# Search for lines containing "ab," "cd," and "efg," print results with line numbers
:v/./,/./-j Compress empty lines
:Man bash View a man page in Vim; first call :runtime! ftplugin/man.vim to activate
/fred|joe Search for "fred" or "joe"
/<\d\d\d\d> Search for four digits exactly
/^\n{3} Search for three consecutive empty lines

##############################################################################
#Plugin - https://github.com/tpope/vim-commentary
##############################################################################

gcc Comment/uncomment the current line
gc{motion} Comment/uncomment the area marked by {motion}, e.g., gcap to comment the entire paragraph
gci{ Comment/uncomment the contents inside curly braces
gc In Visual Mode, press gc to comment or uncomment the selected area
:7,17Commentary Comment lines from 7 to 17

Plugin - https://github.com/junegunn/vim-easy-align
##############################################################################

:EasyAlign = Align around the first '=' in the selected lines
:EasyAlign *= Match and align all '=' characters in the selected lines

Plugin - https://github.com/tpope/vim-unimpaired
##############################################################################

[space Insert an empty line above the current line
]space Insert an empty line below the current line
[e Replace the current line and the line above
]e Replace the current line and the line below
[x XML encode
]x XML decode
[u URL encode
]u URL decode
[y C string encode
]y C string decode
[q Previous quickfix error
]q Next quickfix error
[Q First quickfix error
]Q Last quickfix error
[f Switch to the previous file in the same directory
]f Switch to the next file in the same directory
[os Set :set spell
]os Set :set nospell
=os Set :set invspell
[on Show line numbers
]on Hide line numbers
[ol Show line endings and tabs :set list
]ol Hide line endings and tabs :set nolist
[b Switch to the previous buffer/file, equivalent to :bp
]b Switch to the next buffer/file, equivalent to :bn
[B Switch to the first buffer/file, equivalent to :bfirst
]B Switch to the last buffer/file, equivalent to :blast


##############################################################################
# Plugin - https://github.com/skywind3000/asyncrun.vim
##############################################################################

:AsyncRun ls Run the 'ls' command asynchronously and view the results in the quickfix list using :copen
:AsyncRun -raw ls Run the 'ls' command asynchronously without matching errorformat

Plugin - https://github.com/gaving/vim-textobj-argument
##############################################################################

cia Change the function argument
caa Change the function argument (including comma separation)
dia Delete the function argument
daa Delete the function argument (including comma separation)
via Select the function argument
vaa Select the function argument (including comma separation)
yia Yank (copy) the function argument
yaa Yank (copy) the function argument (including comma separation)

Useful Resources
##############################################################################

Latest Version: https://github.com/vim/vim
Windows Latest Version: https://github.com/vim/vim-win32-installer/releases
Browse Plugins: http://vimawesome.com
Vim Subreddit: https://www.reddit.com/r/vim/
Correctly Set ALT/BS Keys: http://www.skywind.me/blog/archives/2021
Video Tutorials: http://vimcasts.org/
Chinese Help: http://vimcdoc.sourceforge.net/doc/help.html
Chinese Guide: https://github.com/wsdjeg/vim-galore-zh_cn
Five-Minute Scripting Guide: http://www.skywind.me/blog/archives/2193
Scripting Mastery: http://learnvimscriptthehardway.stevelosh.com/
Chinese Script Help: vimcdoc.sourceforge.net/doc/eval.html
Sixteen Years of Experience: http://zzapper.co.uk/vimtips.html
Color Schemes: http://vimcolors.com/

TIPS
##############################################################################

Never use CTRL-C as a substitute for <ESC>. They have completely different meanings and can mistakenly interrupt background scripts.
Many people use CTRL-[ as a substitute for <ESC>. Use the left pinky for CTRL and right pinky for [; it's very convenient once you get used to it.
If you see strange characters in Vim's built-in terminal, use :set t_RS= t_SH= to resolve it.
For Vim 8.2+, you might see strange characters in some terminals; use :set t_TI= t_TE= to resolve it.
If you see odd characters in NeoVim when using certain terminals, use :set guicursor= to resolve it.
When using MS-Terminal, if Vim/NVim enters replace mode by default, set :set t_u7= to resolve it.
Use ciw, ci[, ci", ci( for quick text editing, and diw, di[, di", di( for quick text deletion.
Use w, b, e, or W, B, E for in-line left and right movement instead of h, l or arrow keys; it's much faster.
SHIFT is an accelerator for movement: w, b, e are slow; W, B, E are much faster.
When you spot a typo in insert mode, use CTRL-W instead of <BackSpace>; it's quicker.
Commands like y, d, c will automatically fill registers "1 through "9. The y command fills register "0.
In Visual Mode, the o key turns the selection around; it's very useful.
Writing an article? Write a code block, select it, run :!python to replace it with the result.
After a search, you can use :nohl to remove the highlight. Map it to <BackSpace> to use it frequently.
In search mode, use CTRL-R CTRL-W to insert the word under the cursor; it works in command mode as well.
When mapping keys, use noremap by default and only use map when it's specifically required.
When you feel a task is inefficient, stop and think about a more efficient way to do it. Use u, u, u, u, if needed.
After copying text with y, in command mode, use CTRL-R, then "0 to insert the copied content.
In some cases, Vim might draw highlights slowly, and scrolling might be sluggish. You can try set re=1 to use the old regex engine.
For Windows GVim, you can set :set rop=type:directx,renmode:5 to enhance display.
##############################################################################
# References
##############################################################################

https://github.com/groenewege/vimrc/blob/master/vim_cheat_sheet.txt
http://blog.g-design.net/post/4789778607/vim-cheat-sheet
http://www.keyxl.com/aaa8263/290/VIM-keyboard-shortcuts.htm
http://jmcpherson.org/editing.html
http://www.fprintf.net/vimCheatSheet.html
http://www.ouyaoxiazai.com/article/24/654.html
http://bbs.it-home.org/thread-80794-1-1.html
http://www.lpfrx.com/wp-content/uploads/2008/09/vi.jpg
http://michael.peopleofhonoronly.com/vim/
https://github.com/hobbestigrou/vimtips-fortune/blob/master/fortunes/vimtips
https://github.com/glts/vim-cottidie/blob/master/autoload/cottidie/tips



# vim: set ts=4 sw=4 tw=0 noet noautoindent fdm=manual :

